---

- hosts: all
  sudo: True

  vars:
    app_name: ranko
    repo_url: https://github.com/cloverfeed/ranko.git
    repo_remote: origin
    repo_version: master
    webapps_dir: /srv/webapps
    wsgi_callable: app
    wsgi_file: run.py
    server_name: ranko.emillon.org
    dbname: ranko
    dbuser: ranko

  tasks:
    - name: ensure log directory
      action: file dest={{webapps_dir}}/{{app_name}}/log state=directory

    - name: deploy code from repository
      action: git
      args:
          repo: "{{repo_url}}"
          dest: "{{webapps_dir}}/{{app_name}}/src"
          remote: "{{repo_remote}}"
          version: "{{repo_version}}"
      notify:
        - restart app

    - name: install dependencies into virtualenv
      action: pip
      args:
          requirements: "{{webapps_dir}}/{{app_name}}/src/requirements.txt"
          virtualenv: "{{webapps_dir}}/{{app_name}}/venv"
          state: present

    - name: create DB
      action: command env VIRTUAL_ENV={{webapps_dir}}/{{app_name}}/venv {{webapps_dir}}/{{app_name}}/venv/bin/python {{webapps_dir}}/{{app_name}}/src/makedb.py
      args:
          chdir: "{{webapps_dir}}/{{app_name}}/src"
          creates: "{{webapps_dir}}/{{app_name}}/src/instance/app.db"

    - name: give vagrant user access to postgres
      action: lineinfile
      args:
          dest: /etc/sudoers
          regexp: "^%vagrant"
          line: "%vagrant ALL = (postgres) NOPASSWD: ALL"
          state: present

    - name: create Postgresql DB
      sudo_user: postgres
      postgresql_db: name={{dbname}}

    - name: ensure user has access to database
      sudo_user: postgres
      postgresql_user: db={{dbname}} name={{dbuser}} priv=ALL

    - name: ensure user does not have unnecessary privilege
      sudo_user: postgres
      postgresql_user: name={{dbuser}} role_attr_flags=NOSUPERUSER,NOCREATEDB

    - name: run DB migrations
      action: command env VIRTUAL_ENV={{webapps_dir}}/{{app_name}}/venv {{webapps_dir}}/{{app_name}}/venv/bin/python {{webapps_dir}}/{{app_name}}/src/manage.py db upgrade
      args:
          chdir: "{{webapps_dir}}/{{app_name}}/src"

    - name: create supervisor program config
      action: template
      args:
          src: templates/supervisor.ini
          dest: /etc/supervisor/conf.d/{{app_name}}.conf
      notify:
        - restart app

    - name: delete nginx default site
      when: delete_default_site is defined
      action: file
      args:
          name: /etc/nginx/sites-enabled/default
          state: absent
      notify:
        - restart nginx

    - name: create nginx site config
      action: template
      args:
          src: templates/nginx_site.conf
          dest: /etc/nginx/sites-available/{{app_name}}.conf
      notify:
        - restart nginx

    - name: link nginx config
      action: file
      args:
          src: /etc/nginx/sites-available/{{app_name}}.conf
          dest: /etc/nginx/sites-enabled/{{app_name}}.conf
          state: link

    - name: start app
      action: supervisorctl name={{app_name}} state=started

  handlers:
    - name: restart app
      action: supervisorctl name={{app_name}} state=restarted

    - name: restart nginx
      action: service name=nginx state=restarted
